/**
 * Imperium 4X (Web) - Hexagon
 * ===
 *
 * @module hexagon
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import Point2D from './point2d';
import Cube from './cube';

////////////////////////////////////////////////////////////////////////////////
// Definitions
///////////////////////////////////////////////////////////////////////////////
const DIRECTIONS = [
  [0, -1],
  [1, -1],
  [1, 0],
  [0, 1],
  [-1, 1],
  [-1, 0]
];

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
class Hexagon extends Point2D{
  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  constructor(x, y){
    super(x, y);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  findNeighbors(){
    let neighbors = [];
    for(let idx = 0; idx < DIRECTIONS.length; idx++){
      let direction = DIRECTIONS[idx];
      let x = this._x + direction[0];
      let y = this._y + direction[1];
      let hexagon = new Hexagon(x, y);
      neighbors.push(hexagon);
    }
    return neighbors;
  }

  toCube(){
    let z = this._y;
    let y = (this._x + z) * -1;
    return new Cube(this._x, y, z);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  _findCorner(size, i){
    const ANGLE_DEG = 60 * i + 30;
    const ANGLE_RAD = Math.PI / 180 * ANGLE_DEG;
    let x = this.x + size + Math.cos(ANGLE_RAD);
    let y = this.y + size + Math.sin(ANGLE_RAD);
    return new Point2D(x, y);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  static hexagonDistance(a, b){
    if(!(a instanceof Hexagon) || !(b instanceof Hexagon)){
      throw new Error('input not of type Hexagon');
    }

    let cube1 = a.toCube();
    let cube2 = b.toCube();

    return Math.ceil((Math.abs(cube1.x - cube2.x) + Math.abs(cube1.y - cube2.y) + Math.abs(cube1.z - cube2.z)) / 2);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Hexagon;